module.exports = [

    "float easeInQuad(float t, float b, float c, float d) {",
    "    return (t <= d) ? (c * (t /= d) * t + b) : (b + c);",
    "}",
    "vec3 easeInQuad(float t, vec3 b, vec3 c, float d) {",
    "    return (t <= d) ? (c * (t /= d) * t + b) : (b + c);",
    "}",
    "vec4 easeInQuad(float t, vec4 b, vec4 c, float d) {",
    "    return (t <= d) ? (c * (t /= d) * t + b) : (b + c);",
    "}",
    "",
    "float easeOutQuad(float t, float b, float c, float d) {",
    "    return (t <= d) ? (-c * (t /= d) * (t - 2.0) + b) : (b + c);",
    "}",
    "vec3 easeOutQuad(float t, vec3 b, vec3 c, float d) {",
    "    return (t <= d) ? (-c * (t /= d) * (t - 2.0) + b) : (b + c);",
    "}",
    "vec4 easeOutQuad(float t, vec4 b, vec4 c, float d) {",
    "    return (t <= d) ? (-c * (t /= d) * (t - 2.0) + b) : (b + c);",
    "}",
    "",
    "float easeInOutQuad(float t, float b, float c, float d) {",
    "    if ((t /= d / 2.0) < 1.0) {",
    "        return (t <= d) ? (c / 2.0 * t * t + b) : (b + c);",
    "    } else {",
    "        return (t <= d) ? (-c / 2.0 * ((--t) * (t - 2.0) - 1.0) + b) : (b + c);",
    "    }",
    "}",
    "vec3 easeInOutQuad(float t, vec3 b, vec3 c, float d) {",
    "    if ((t /= d / 2.0) < 1.0) {",
    "        return (t <= d) ? (c / 2.0 * t * t + b) : (b + c);",
    "    } else {",
    "        return (t <= d) ? (-c / 2.0 * ((--t) * (t - 2.0) - 1.0) + b) : (b + c);",
    "    }",
    "}",
    "vec4 easeInOutQuad(float t, vec4 b, vec4 c, float d) {",
    "    if ((t /= d / 2.0) < 1.0) {",
    "        return (t <= d) ? (c / 2.0 * t * t + b) : (b + c);",
    "    } else {",
    "        return (t <= d) ? (-c / 2.0 * ((--t) * (t - 2.0) - 1.0) + b) : (b + c);",
    "    }",
    "}",
    "",

].join("\n");
