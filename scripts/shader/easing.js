(function() {

    var EasingFunctions = [
        "#ifndef LINEAR",
        "#define LINEAR 0",
        "#endif",
        "#ifndef EASE_IN_QUAD",
        "#define EASE_IN_QUAD 1",
        "#endif",
        "#ifndef EASE_OUT_QUAD",
        "#define EASE_OUT_QUAD 2",
        "#endif",
        "#ifndef EASE_INOUT_QUAD",
        "#define EASE_INOUT_QUAD 3",
        "#endif",
        "#ifndef CUBIC_IN",
        "#define CUBIC_IN 4",
        "#endif",
        "#ifndef CUBIC_OUT",
        "#define CUBIC_OUT 5",
        "#endif",
        "#ifndef CUBIC_IN_OUT",
        "#define CUBIC_IN_OUT 6",
        "#endif",
        "#ifndef QUARTIC_IN",
        "#define QUARTIC_IN 7",
        "#endif",
        "#ifndef QUARTIC_OUT",
        "#define QUARTIC_OUT 8",
        "#endif",
        "#ifndef QUARTIC_IN_OUT",
        "#define QUARTIC_IN_OUT 9",
        "#endif",
        "#ifndef QINTIC_IN",
        "#define QINTIC_IN 10",
        "#endif",
        "#ifndef QINTIC_OUT",
        "#define QINTIC_OUT 11",
        "#endif",
        "#ifndef QINTIC_IN_OUT",
        "#define QINTIC_IN_OUT 12",
        "#endif",
        "#ifndef SINE_IN",
        "#define SINE_IN 13",
        "#endif",
        "#ifndef SINE_OUT",
        "#define SINE_OUT 14",
        "#endif",
        "#ifndef SINE_IN_OUT",
        "#define SINE_IN_OUT 15",
        "#endif",
        "#ifndef EXPONENTIAL_IN",
        "#define EXPONENTIAL_IN 16",
        "#endif",
        "#ifndef EXPONENTIAL_OUT",
        "#define EXPONENTIAL_OUT 17",
        "#endif",
        "#ifndef EXPONENTIAL_IN_OUT",
        "#define EXPONENTIAL_IN_OUT 18",
        "#endif",
        "#ifndef CIRCULAR_IN",
        "#define CIRCULAR_IN 19",
        "#endif",
        "#ifndef CIRCULAR_OUT",
        "#define CIRCULAR_OUT 20",
        "#endif",
        "#ifndef CIRCULAR_IN_OUT",
        "#define CIRCULAR_IN_OUT 21",
        "#endif",
        "#ifndef ELASTIC_IN",
        "#define ELASTIC_IN 22",
        "#endif",
        "#ifndef ELASTIC_OUT",
        "#define ELASTIC_OUT 23",
        "#endif",
        "#ifndef ELASTIC_IN_OUT",
        "#define ELASTIC_IN_OUT 24",
        "#endif",
        "#ifndef BACK_IN",
        "#define BACK_IN 25",
        "#endif",
        "#ifndef BACK_OUT",
        "#define BACK_OUT 26",
        "#endif",
        "#ifndef BACK_IN_OUT",
        "#define BACK_IN_OUT 27",
        "#endif",
        "#ifndef BOUNCE_OUT",
        "#define BOUNCE_OUT 28",
        "#endif",
        "#ifndef BOUNCE_IN",
        "#define BOUNCE_IN 29",
        "#endif",
        "#ifndef BOUNCE_IN_OUT",
        "#define BOUNCE_IN_OUT 30",
        "#endif",

        "#ifndef PI",
        "#define PI 3.141592653589793",
        "#endif",
        "#ifndef HALF_PI",
        "#define HALF_PI 1.5707963267948966",
        "#endif",

        "float easeInQuad(float t) {",
        "  return t * t;",
        "}",

        "float easeOutQuad(float t) {",
        "  return -t * (t - 2.0);",
        "}",

        "float easeInOutQuad(float t) {",
        "  float p = 2.0 * t * t;",
        "  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;",
        "}",

        "float cubicIn(float t) {",
        "  return t * t * t;",
        "}",

        "float cubicOut(float t) {",
        "  float f = t - 1.0;",
        "  return f * f * f + 1.0;",
        "}",

        "float cubicInOut(float t) {",
        "  return t < 0.5",
        "    ? 4.0 * t * t * t",
        "    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;",
        "}",

        
        "float quarticIn(float t) {",
        "  return pow(t, 4.0);",
        "}",
        
        "float quarticOut(float t) {",
        "  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;",
        "}",
        
        "float quarticInOut(float t) {",
        "  return t < 0.5",
        "    ? +8.0 * pow(t, 4.0)",
        "    : -8.0 * pow(t - 1.0, 4.0) + 1.0;",
        "}",
        
        "float qinticIn(float t) {",
        "  return pow(t, 5.0);",
        "}",
        
        "float qinticOut(float t) {",
        "  return 1.0 - (pow(t - 1.0, 5.0));",
        "}",
        
        "float qinticInOut(float t) {",
        "  return t < 0.5",
        "    ? +16.0 * pow(t, 5.0)",
        "    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;",
        "}",
        
        "float sineIn(float t) {",
        "  return sin((t - 1.0) * HALF_PI) + 1.0;",
        "}",
        
        "float sineOut(float t) {",
        "  return sin(t * HALF_PI);",
        "}",
        
        "float sineInOut(float t) {",
        "  return -0.5 * (cos(PI * t) - 1.0);",
        "}",
        
        "float exponentialIn(float t) {",
        "  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));",
        "}",
        
        "float exponentialOut(float t) {",
        "  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);",
        "}",
        
        "float exponentialInOut(float t) {",
        "  return t == 0.0 || t == 1.0",
        "    ? t",
        "    : t < 0.5",
        "      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)",
        "      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;",
        "}",
        
        "float circularIn(float t) {",
        "  return 1.0 - sqrt(1.0 - t * t);",
        "}",
        
        "float circularOut(float t) {",
        "  return sqrt((2.0 - t) * t);",
        "}",
        
        "float circularInOut(float t) {",
        "  return t < 0.5",
        "    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))",
        "    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);",
        "}",
        
        "float elasticIn(float t) {",
        "  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));",
        "}",
        
        "float elasticOut(float t) {",
        "  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;",
        "}",
        
        "float elasticInOut(float t) {",
        "  return t < 0.5",
        "    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))",
        "    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;",
        "}",
        
        "float backIn(float t) {",
        "  return pow(t, 3.0) - t * sin(t * PI);",
        "}",
        
        "float backOut(float t) {",
        "  float f = 1.0 - t;",
        "  return 1.0 - (pow(f, 3.0) - f * sin(f * PI));",
        "}",
        
        "float backInOut(float t) {",
        "  float f = t < 0.5",
        "    ? 2.0 * t",
        "    : 1.0 - (2.0 * t - 1.0);",
        "  float g = pow(f, 3.0) - f * sin(f * PI);",
        "  return t < 0.5",
        "    ? 0.5 * g",
        "    : 0.5 * (1.0 - g) + 0.5;",
        "}",
        
        "float bounceOut(float t) {",
        "  const float a = 4.0 / 11.0;",
        "  const float b = 8.0 / 11.0;",
        "  const float c = 9.0 / 10.0;",
        "  const float ca = 4356.0 / 361.0;",
        "  const float cb = 35442.0 / 1805.0;",
        "  const float cc = 16061.0 / 1805.0;",
        "  float t2 = t * t;",
        "  return t < a",
        "    ? 7.5625 * t2",
        "    : t < b",
        "      ? 9.075 * t2 - 9.9 * t + 3.4",
        "      : t < c",
        "        ? ca * t2 - cb * t + cc",
        "        : 10.8 * t * t - 20.52 * t + 10.72;",
        "}",
        
        "float bounceIn(float t) {",
        "  return 1.0 - bounceOut(1.0 - t);",
        "}",
        
        "float bounceInOut(float t) {",
        "  return t < 0.5",
        "    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))",
        "    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;",
        "}",
        
        "float ease(int type, float t) {",
        "  if (t < 0.0) return 0.0;",
        "  else if (t >= 1.0) return 1.0;",
        "",
        "  if (type == EASE_IN_QUAD) return easeInQuad(t);",
        "  if (type == EASE_OUT_QUAD) return easeOutQuad(t);",
        "  if (type == EASE_INOUT_QUAD) return easeInOutQuad(t);",
        "  if (type == CUBIC_IN) return cubicIn(t);",
        "  if (type == CUBIC_OUT) return cubicOut(t);",
        "  if (type == CUBIC_IN_OUT) return cubicInOut(t);",
        "  if (type == QUARTIC_IN) return quarticIn(t);",
        "  if (type == QUARTIC_OUT) return quarticOut(t);",
        "  if (type == QUARTIC_IN_OUT) return quarticInOut(t);",
        "  if (type == QINTIC_IN) return qinticIn(t);",
        "  if (type == QINTIC_OUT) return qinticOut(t);",
        "  if (type == QINTIC_IN_OUT) return qinticInOut(t);",
        "  if (type == SINE_IN) return sineIn(t);",
        "  if (type == SINE_OUT) return sineOut(t);",
        "  if (type == SINE_IN_OUT) return sineInOut(t);",
        "  if (type == EXPONENTIAL_IN) return exponentialIn(t);",
        "  if (type == EXPONENTIAL_OUT) return exponentialOut(t);",
        "  if (type == EXPONENTIAL_IN_OUT) return exponentialInOut(t);",
        "  if (type == CIRCULAR_IN) return circularIn(t);",
        "  if (type == CIRCULAR_OUT) return circularOut(t);",
        "  if (type == CIRCULAR_IN_OUT) return circularInOut(t);",
        "  if (type == ELASTIC_IN) return elasticIn(t);",
        "  if (type == ELASTIC_OUT) return elasticOut(t);",
        "  if (type == ELASTIC_IN_OUT) return elasticInOut(t);",
        "  if (type == BACK_IN) return backIn(t);",
        "  if (type == BACK_OUT) return backOut(t);",
        "  if (type == BACK_IN_OUT) return backInOut(t);",
        "  if (type == BOUNCE_OUT) return bounceOut(t);",
        "  if (type == BOUNCE_IN) return bounceIn(t);",
        "  if (type == BOUNCE_IN_OUT) return bounceInOut(t);",
        "  return t;",
        "}",
    ].join("\n");

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = EasingFunctions;
    } else {
        window["EasingFunctions"] = EasingFunctions;
    }

})();
